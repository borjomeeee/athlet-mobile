diff --git a/node_modules/recoil/es/recoil.js b/node_modules/recoil/es/recoil.js
index d44f72b..b11094a 100644
--- a/node_modules/recoil/es/recoil.js
+++ b/node_modules/recoil/es/recoil.js
@@ -5800,9 +5800,9 @@ const {
 
 function useGetRecoilValueInfo() {
   const storeRef = useStoreRef$4();
-  return ({
+  return react.useCallback(({
     key
-  }) => peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key);
+  }) => peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key), [storeRef]);
 }
 
 var Recoil_useGetRecoilValueInfo = useGetRecoilValueInfo;
diff --git a/node_modules/recoil/index.d.ts b/node_modules/recoil/index.d.ts
index 41ccc84..ddaff55 100644
--- a/node_modules/recoil/index.d.ts
+++ b/node_modules/recoil/index.d.ts
@@ -127,6 +127,7 @@
   reset(s: RecoilState<any>): void;
  }
  export interface CallbackInterface {
+  get: <T>(recoilVal: RecoilState<T>) => T,
   set: <T>(recoilVal: RecoilState<T>, valOrUpdater: ((currVal: T) => T) | T) => void;
   reset: (recoilVal: RecoilState<any>) => void; // eslint-disable-line @typescript-eslint/no-explicit-any
   refresh: (recoilValue: RecoilValue<any>) => void;
diff --git a/node_modules/recoil/native/recoil.js b/node_modules/recoil/native/recoil.js
index b53c8aa..cbb1364 100644
--- a/node_modules/recoil/native/recoil.js
+++ b/node_modules/recoil/native/recoil.js
@@ -5801,9 +5801,9 @@ const {
 
 function useGetRecoilValueInfo() {
   const storeRef = useStoreRef$4();
-  return ({
+  return react.useCallback(({
     key
-  }) => peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key);
+  }) => peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key), [storeRef]);
 }
 
 var Recoil_useGetRecoilValueInfo = useGetRecoilValueInfo;
@@ -6052,6 +6052,7 @@ function recoilCallback(store, fn, args, extraInterface) {
 
     const callbackInterface = Recoil_lazyProxy({ ...(extraInterface !== null && extraInterface !== void 0 ? extraInterface : {}),
       // flowlint-line unclear-type:off
+      get: (node) => getRecoilValueAsLoadable$1(store, node).contents,
       set: (node, newValue) => setRecoilValue$3(store, node, newValue),
       reset: node => setRecoilValue$3(store, node, DEFAULT_VALUE$5),
       refresh: node => refreshRecoilValue$1(store, node),
